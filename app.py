# app.py

import gradio as gr
from interactive_pipeline import create_interactive_pipeline

# Define the Gradio interface using Blocks for more control
with gr.Blocks(theme=gr.themes.Soft(), title="CryptoSentinator v2") as demo:
    gr.Markdown(
        """
        # ü§ñ CryptoSentinator v2: The Specialist Crew
        Enter a cryptocurrency keyword (e.g., Bitcoin, Ethereum) to start the multi-agent analysis.
        The system will gather data, analyze sentiment and topics, form a strategic hypothesis, and evaluate its own performance.
        """
    )
    
     # --- SUITABLE DISCLAIMER BLOCK ---
    gr.Markdown(
        """
        ---
        **‚ö†Ô∏è Important Disclaimer:**
        
        This tool is provided for **educational and demonstrational purposes only**. The output is generated by an AI model using **simulated data** and should **not** be considered financial advice. 
        
        *   The analysis may contain inaccuracies, errors, or biases.
        *   **Do not** use the output of this tool to make investment or financial decisions.
        *   Always conduct your own research (DYOR) and consult with a qualified financial advisor before making any investments.
        ---
        """
    )
    # --- END OF DISCLAIMER ---
    
    with gr.Row():
        keyword_input = gr.Textbox(
            label="Enter Cryptocurrency Keywords", 
            placeholder="e.g., Bitcoin"
        )
    
    analyze_button = gr.Button("üöÄ Analyze Sentiment", variant="primary")
    
    gr.Markdown("---") # Divider
    
    output_report = gr.Markdown(label="Analysis Report")
    
    # Define the click action
    analyze_button.click(
        fn=create_interactive_pipeline,
        inputs=keyword_input,
        outputs=output_report,
        api_name="analyze" # Exposes this as an API endpoint
    )
    
    # Add examples for users to try
    gr.Examples(
        examples=[
            ["Bitcoin"],
            ["Ethereum"],
            ["Solana"]
        ],
        inputs=keyword_input,
        outputs=output_report,
        fn=create_interactive_pipeline,
        cache_examples=False, # Set to True for faster demo, but may show stale data
    )

# Launch the interface
if __name__ == "__main__":
    demo.launch(share=True)